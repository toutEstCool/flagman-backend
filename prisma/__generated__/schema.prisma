generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum UserRole {
  user
  admin
  agent
  developer
}

enum UserStatus {
  active
  banned
  inactive
}

enum AuthType {
  phone
  email
  social
}

model User {
  id                 String     @id @default(uuid())
  email              String?    @unique
  phone              String?    @unique
  name               String?
  avatarUrl          String?
  city               String?
  isVerified         Boolean    @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean    @default(false) @map("is_two_factor_enabled")
  deletedAt          DateTime?
  role               UserRole   @default(user)
  status             UserStatus @default(active)
  authType           AuthType   @default(phone)
  lastLogin          DateTime?
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  meta               Json?
  accounts           Account[]  @relation("UserAccounts")

  listings       Listing[]
  favorites      Favorite[]
  chats          Chat[]         @relation("UserChats")
  messages       Message[]
  subscriptions  Subscription[]
  activityLogs   ActivityLog[]
  complaintsSent Complaint[]    @relation("ComplaintSender")
  complaintsToMe Complaint[]    @relation("ComplaintReceiver")
}

enum ListingType {
  sale
  rent
}

enum PropertyType {
  apartment
  house
  land
  commercial
}

enum ListingStatus {
  active
  hidden
  archived
  draft
}

model Listing {
  id           String        @id @default(uuid())
  title        String
  description  String
  price        Int
  type         ListingType
  propertyType PropertyType
  address      String
  cityId       String?
  city         City?         @relation(fields: [cityId], references: [id])
  latitude     Float
  longitude    Float
  area         Float
  rooms        Int?
  floor        Int?
  totalFloors  Int?
  status       ListingStatus @default(active)
  isPremium    Boolean       @default(false)
  images       String[]
  publishedAt  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  favorites     Favorite[]
  subscriptions Subscription[]
  chats         Chat[]
  slug          String?        @unique
  viewCount     Int            @default(0)
  contactCount  Int            @default(0)
  Complaint     Complaint[]
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId])
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  listingId String?
  filter    Json
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  listing Listing? @relation(fields: [listingId], references: [id])
}

model Chat {
  id          String   @id @default(uuid())
  userId      String
  listingId   String
  createdAt   DateTime @default(now())
  unreadCount Int      @default(0)

  user          User      @relation("UserChats", fields: [userId], references: [id])
  listing       Listing   @relation(fields: [listingId], references: [id])
  messages      Message[]
  lastMessageAt DateTime?
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat      Chat        @relation(fields: [chatId], references: [id])
  sender    User        @relation(fields: [senderId], references: [id])
  Complaint Complaint[]
}

model City {
  id        String    @id @default(uuid())
  name      String    @unique
  region    String?
  latitude  Float
  longitude Float
  rating    Int       @default(0)
  listings  Listing[]
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  meta      Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Complaint {
  id String @id @default(uuid())

  senderId   String
  receiverId String?
  listingId  String?
  messageId  String?
  reason     String
  status     ComplaintStatus @default(open)
  createdAt  DateTime        @default(now())

  sender   User  @relation("ComplaintSender", fields: [senderId], references: [id], map: "fk_complaint_sender")
  receiver User? @relation("ComplaintReceiver", fields: [receiverId], references: [id], map: "fk_complaint_receiver")

  listing Listing? @relation(fields: [listingId], references: [id])
  message Message? @relation(fields: [messageId], references: [id])
}

model Account {
  id String @id @default(uuid())

  type              String
  provider          String
  providerAccountId String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int?    @map("expires_at")

  userId String?
  user   User?   @relation("UserAccounts", fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("Tokens")
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum ComplaintStatus {
  open
  reviewed
  rejected
  resolved
}
